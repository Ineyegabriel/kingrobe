{"ast":null,"code":"import { ShopActionTypes } from '../ActionTypes';\nexport const fetchCollectionStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTION_START\n});\nexport const fetchCollectionSuccess = collection => ({\n  type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n  payload: collection\n});\nexport const fetchCollectionFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n  payload: errorMessage\n});\n/*\nexport const fetchCollectionStartAsync = () => {\n    return dispatch =>{\n        const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionStart());\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertSnapShottoMappableArray(snapshot);\n            dispatch(fetchCollectionSuccess(collectionsMap));\n        }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n    }\n};*/","map":{"version":3,"sources":["/Library/WebServer/Documents/react-apps/kingrobe-with-Stripe-backend/client/src/redux/shop/shopActions.js"],"names":["ShopActionTypes","fetchCollectionStart","type","FETCH_COLLECTION_START","fetchCollectionSuccess","collection","FETCH_COLLECTION_SUCCESS","payload","fetchCollectionFailure","errorMessage","FETCH_COLLECTION_FAILURE"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,gBAA9B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,OAAO;AACvCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADiB,CAAP,CAA7B;AAIP,OAAO,MAAMC,sBAAsB,GAAGC,UAAU,KAAI;AAChDH,EAAAA,IAAI,EAAEF,eAAe,CAACM,wBAD0B;AAEhDC,EAAAA,OAAO,EAAEF;AAFuC,CAAJ,CAAzC;AAKP,OAAO,MAAMG,sBAAsB,GAAGC,YAAY,KAAI;AAClDP,EAAAA,IAAI,EAAEF,eAAe,CAACU,wBAD4B;AAElDH,EAAAA,OAAO,EAAEE;AAFyC,CAAJ,CAA3C;AAKP","sourcesContent":["import {ShopActionTypes} from '../ActionTypes';\n\nexport const fetchCollectionStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTION_START\n});\n\nexport const fetchCollectionSuccess = collection =>({\n    type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n    payload: collection\n});\n\nexport const fetchCollectionFailure = errorMessage =>({\n    type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n    payload: errorMessage\n});\n\n/*\nexport const fetchCollectionStartAsync = () => {\n    return dispatch =>{\n        const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionStart());\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertSnapShottoMappableArray(snapshot);\n            dispatch(fetchCollectionSuccess(collectionsMap));\n        }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n    }\n};*/\n"]},"metadata":{},"sourceType":"module"}