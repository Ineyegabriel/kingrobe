{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { ShopActionTypes } from '../ActionTypes';\nimport { firestore, convertSnapShottoMappableArray } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFailure } from '../shop/shopActions';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertSnapShottoMappableArray, snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  }\n  /*    collectionRef.get().then(snapshot => {\n          const collectionsMap = convertSnapShottoMappableArray(snapshot);\n      }).catch(error => dispatch(fetchCollectionFailure(error.message)));*/\n\n}\nexport function* fetchCollectionStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}\nexport function* ShopSaga() {\n  yield all([call(fetchCollectionStart)]);\n}","map":{"version":3,"sources":["/Library/WebServer/Documents/react-apps/kingrobe-with-Stripe-backend/client/src/redux/shop/shopSagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","firestore","convertSnapShottoMappableArray","fetchCollectionSuccess","fetchCollectionFailure","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLECTION_START","ShopSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,IAAnB,EAAwBC,GAAxB,EAA4BC,GAA5B,QAAsC,oBAAtC;AACA,SAAQC,eAAR,QAA8B,gBAA9B;AACA,SAAQC,SAAR,EAAkBC,8BAAlB,QAAuD,+BAAvD;AACA,SAAQC,sBAAR,EAA+BC,sBAA/B,QAA4D,qBAA5D;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,MAAG;AACC,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACK,8BAAD,EAAgCM,QAAhC,CAAjC;AACA,UAAMV,GAAG,CAACK,sBAAsB,CAACO,cAAD,CAAvB,CAAT;AACH,GALD,CAMA,OAAOC,KAAP,EAAa;AACT,UAAMb,GAAG,CAACM,sBAAsB,CAACO,KAAK,CAACC,OAAP,CAAvB,CAAT;AACH;AAGD;;;;AAGH;AACD,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMjB,UAAU,CACZI,eAAe,CAACc,sBADJ,EAEZT,oBAFY,CAAhB;AAIH;AAED,OAAO,UAAUU,QAAV,GAAqB;AACxB,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACgB,oBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import {takeLatest,call,put,all} from 'redux-saga/effects';\nimport {ShopActionTypes} from '../ActionTypes';\nimport {firestore,convertSnapShottoMappableArray} from '../../firebase/firebase.utils';\nimport {fetchCollectionSuccess,fetchCollectionFailure} from '../shop/shopActions';\n\nexport function* fetchCollectionAsync(){\n    try{\n        const collectionRef = firestore.collection('collections');\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertSnapShottoMappableArray,snapshot);\n        yield put(fetchCollectionSuccess(collectionsMap));\n    }\n    catch (error){\n        yield put(fetchCollectionFailure(error.message))\n    }\n\n\n    /*    collectionRef.get().then(snapshot => {\n            const collectionsMap = convertSnapShottoMappableArray(snapshot);\n        }).catch(error => dispatch(fetchCollectionFailure(error.message)));*/\n}\nexport function* fetchCollectionStart() {\n    yield takeLatest(\n        ShopActionTypes.FETCH_COLLECTION_START,\n        fetchCollectionAsync\n    );\n}\n\nexport function* ShopSaga() {\n    yield all([\n        call(fetchCollectionStart)\n    ])\n}"]},"metadata":{},"sourceType":"module"}