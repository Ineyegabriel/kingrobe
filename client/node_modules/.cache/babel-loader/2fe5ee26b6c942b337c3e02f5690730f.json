{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAPBD2c7RLiaYnFqfpeAoY5DKA2DQmwXkI\",\n  authDomain: \"crowndb-8a2b0.firebaseapp.com\",\n  databaseURL: \"https://crowndb-8a2b0.firebaseio.com\",\n  projectId: \"crowndb-8a2b0\",\n  storageBucket: \"\",\n  messagingSenderId: \"943613070938\",\n  appId: \"1:943613070938:web:834791d7e24ab156\"\n};\nfirebase.initializeApp(firebaseConfig);\n/*Function for saving user data gotten back from google sign in*/\n\nexport const createUserProfileDocument = async (userDetailsfromOauth, AdditionalData) => {\n  if (!userDetailsfromOauth) return;\n  const userRef = firestore.doc(`users/${userDetailsfromOauth.uid}`);\n  const userSnapshot = await userRef.get();\n\n  if (!userSnapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userDetailsfromOauth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...AdditionalData\n      });\n    } catch (error) {\n      console.log('Oops ! Error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const addDocumentandCollection = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertSnapShottoMappableArray = collectionSnapshot => {\n  const transformedCollection = collectionSnapshot.docs.map(docSnapshot => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items\n    };\n  });\n  /* Converting array into objects*/\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const GoogleProvider = new firebase.auth.GoogleAuthProvider();\nGoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(GoogleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Library/WebServer/Documents/react-apps/kingrobe-with-Stripe-backend/client/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userDetailsfromOauth","AdditionalData","userRef","firestore","doc","uid","userSnapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","userAuth","addDocumentandCollection","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertSnapShottoMappableArray","collectionSnapshot","transformedCollection","docs","map","docSnapshot","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","GoogleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAPBD2c7RLiaYnFqfpeAoY5DKA2DQmwXkI\",\n    authDomain: \"crowndb-8a2b0.firebaseapp.com\",\n    databaseURL: \"https://crowndb-8a2b0.firebaseio.com\",\n    projectId: \"crowndb-8a2b0\",\n    storageBucket: \"\",\n    messagingSenderId: \"943613070938\",\n    appId: \"1:943613070938:web:834791d7e24ab156\"\n};\nfirebase.initializeApp(firebaseConfig);\n/*Function for saving user data gotten back from google sign in*/\nexport const createUserProfileDocument = async (userDetailsfromOauth, AdditionalData) =>{\n    if(!userDetailsfromOauth) return;\n    const userRef = firestore.doc(`users/${userDetailsfromOauth.uid}`);\n    const userSnapshot = await userRef.get();\n    if(!userSnapshot.exists){\n        const {displayName, email} = userDetailsfromOauth;\n        const createdAt = new Date();\n        try{\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...AdditionalData\n            })\n        }\n        catch(error) {\n            console.log('Oops ! Error creating user', error.message);\n        }\n    }\n    return userRef;\n};\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) =>{\n        const unsubscribe = auth.onAuthStateChanged(userAuth =>{\n            unsubscribe();\n            resolve(userAuth);\n        }, reject)\n    });\n}\nexport const addDocumentandCollection = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef, obj);\n    });\n    return await batch.commit();\n};\n\n export const convertSnapShottoMappableArray = collectionSnapshot =>{\n   const transformedCollection = collectionSnapshot.docs.map(docSnapshot =>{\n       const {title, items} = docSnapshot.data();\n       return {\n           routeName: encodeURI(title.toLowerCase()),\n           id: docSnapshot.id,\n           title,\n           items,\n       };\n   });\n   /* Converting array into objects*/\n   return transformedCollection.reduce((accumulator, collection) => {\n       accumulator[collection.title.toLowerCase()] = collection;\n       return accumulator;\n   },{})\n };\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const GoogleProvider = new firebase.auth.GoogleAuthProvider();\n\nGoogleProvider.setCustomParameters({prompt: 'select_account'});\n\nexport const signInWithGoogle = () => auth.signInWithPopup(GoogleProvider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}